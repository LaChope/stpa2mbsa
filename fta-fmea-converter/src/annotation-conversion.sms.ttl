# baseURI: http://onto.fel.cvut.cz/ontologies/msmt/annotation-conversion
# imports: http://onto.fel.cvut.cz/ontologies/s-pipes-lib

@prefix : <http://onto.fel.cvut.cz/ontologies/csat/time-analysis-0.1/> .
@prefix doc: <http://onto.fel.cvut.cz/ontologies/documentation/> .
@prefix kbss-module: <http://onto.fel.cvut.cz/ontologies/lib/module/> .
@prefix km-sesame: <http://onto.fel.cvut.cz/ontologies/lib/module/sesame/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix dc-terms: <http://purl.org/dc/terms/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix ufo: <http://onto.fel.cvut.cz/ontologies/ufo/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix fmea:<http://onto.fel.cvut.cz/ontologies/fmea/> .
@prefix fta: <http://onto.fel.cvut.cz/ontologies/fta-fmea-application/> .
@prefix annotations: <https://onto.fel.cvut.cz/ontologies/annotations/> .

<http://onto.fel.cvut.cz/ontologies/msmt/annotation-conversion>
  a owl:Ontology ;
  owl:imports <http://onto.fel.cvut.cz/ontologies/s-pipes-lib> ;
.

:construct-fta-model
  a sml:ApplyConstruct ;
  sm:next :convert-document_Return ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - create individuals for all concepts
CONSTRUCT{
    ?newc a ?newType .
    ?newc fta:hasName ?label .
    ?newc fta:origin ?c .
	?newc dc-terms:source ?linkIRI .
}WHERE{
    ?c a ?oldType ;
       annotations:isDenotedBy ?label .
	
	
	
	BIND(
		IF(strends(str(?oldType), 'Component'), 
			fta:Component, 
			IF(strends(str(?oldType), 'Function'), 
				fta:Function, 
				IF(strends(str(?oldType), 'Effect'), 
				fta:FaultEvent, fta:null))) as ?newType)
				
	FILTER (?newType != fta:null)
	BIND(IRI(CONCAT(str(?newType), '/instance-', REPLACE(str(?c), '^.*/([^/]+$)','$1'))) AS ?newc)
	
	OPTIONAL{
	  ?c dc-terms:source ?link .
	  BIND(iri(str(?link)) as ?linkIRI) 
	}
}VALUES ?oldType {
    fmea:Component
    fmea:Function
    fmea:FinalLevelEffect
    fmea:LocalEffect
    fmea:NextLevelEffect
}
"""; ];
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 2 - convert failure modes

CONSTRUCT{
	?newc a fta:FailureMode .
	?newc fta:hasFailureModeType "FailureMode"@cs .
	?newc fta:hasName ?label .
	?newc fta:origin ?c .
	?newc dc-terms:source ?linkIRI .
}WHERE{
	?c a fmea:FailureMode ;
	   annotations:isDenotedBy ?label .
	OPTIONAL {
	   ?c dc-terms:source ?link .
	   BIND(iri(str(?link)) as ?linkIRI) 
	}
	BIND(IRI(CONCAT(str(fta:FailureMode), '/instance-', REPLACE(str(?c), '^.*/([^/]+$)','$1'))) AS ?newc)
}

"""; ];
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 3 - convert causes 

CONSTRUCT{
	?newc a fta:FailureMode .
	?newc fta:hasFailureModeType "FailureModeCause"@cs .
	?newc fta:hasName ?label .
	?newc fta:origin ?c .
	?newc dc-terms:source ?linkIRI .
}WHERE{
	?c a fmea:Cause;
	   annotations:isDenotedBy ?label .
	OPTIONAL {
	   ?c dc-terms:source ?link .
	   BIND(iri(str(?link)) as ?linkIRI) 
	}   
	BIND(IRI(CONCAT(str(fta:FailureMode), '/instance-', REPLACE(str(?c), '^.*/([^/]+$)','$1'))) AS ?newc)
}
"""; ];
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 4 - convert hasComponent
CONSTRUCT{
    ?newPart fta:isPartOf ?newWhole .
	
}WHERE{
    ?whole a fmea:Component ;
           fmea:hasComponent ?part .
    ?part a fmea:Component .
	
    BIND(IRI(CONCAT(str(fta:Component), '/instance-', REPLACE(str(?whole), '^.*/([^/]+$)','$1'))) AS ?newWhole)
    BIND(IRI(CONCAT(str(fta:Component), '/instance-', REPLACE(str(?part), '^.*/([^/]+$)','$1'))) AS ?newPart)
}
 """ ;
    ] ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 5 - convert - hasBehavior
CONSTRUCT{
	?newComp ?newProp ?newBehavior .
}WHERE {
    ?comp a fmea:Component ;
           ?oldProp ?behavior .
    ?behavior a ?range .

    BIND(
		IF(STRENDS(str(?range), 'Function'), 
			fta:Function,
			IF(strends(str(?range), 'FailureMode'),
				fta:FailureMode,
				fta:null))
		as ?newRange
	)
	FILTER(?newRange != fta:null)

    BIND(IRI(CONCAT(str(fta:Component), '/instance-', REPLACE(str(?comp), '^.*/([^/]+$)','$1'))) AS ?newComp)
    BIND(IRI(CONCAT(str(?newRange), '/instance-', REPLACE(str(?behavior), '^.*/([^/]+$)','$1'))) AS ?newBehavior)
}VALUES (?oldProp ?newProp ?range) {
	(fmea:hasFailureMode fta:hasFailureMode fmea:FailureMode)
	(fmea:hasFunction fta:hasFunction fmea:Function)
}
""" ; ] ;
sml:constructQuery [
      a sp:Construct ;
      sp:text """# 6 - convert isCauseOf

CONSTRUCT{
    ?newFm fta:requires ?newc .
}WHERE{
	?c a fmea:Cause ;
	   fmea:isCauseOf ?fm .
	?fm a fmea:FailureMode .

	BIND(IRI(CONCAT(str(fta:FailureMode), '/instance-', REPLACE(str(?c), '^.*/([^/]+$)','$1'))) AS ?newc)
	BIND(IRI(CONCAT(str(fta:FailureMode), '/instance-', REPLACE(str(?fm), '^.*/([^/]+$)','$1'))) AS ?newFm)
}

"""; ];
  kbss-module:has-output-graph-constraint [
      a sp:Ask ;
      sp:text """# 1 - component not found
ASK
WHERE {
    FILTER NOT EXISTS {
          ?rd a fta:Component .
    }
}""" ;
    ] ;
  sml:replace true ;
.
:list-ducuments-model
  a sml:ApplyConstruct ;
  sm:next :list-documents_Return ;
  sml:constructQuery [
      a sp:Construct ;
      sp:text """# 1 - list documents
CONSTRUCT{
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--demo/DA42-POH-38> a fta:Document;
		fta:hasName "DA42-POH-38 - Simple Demo".
		
	<http://onto.fel.cvut.cz/ontologies/fmea/BlueSky/DA42-POH--section-7_3-7_4/DA42-POH-39> a fta:Document;
		fta:hasName "DA42-POH-39 - sections 7.3 to 7.4".
		
	<http://onto.fel.cvut.cz/ontologies/fmea/BlueSky/DA42-POH--section-7_9-7_14/DA42-POH-44> a fta:Document;
		fta:hasName "DA42-POH-44 - sections 7.9 to 7.14".
		
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-38> a fta:Document;
		fta:hasName "DA42-POH-38".
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-39> a fta:Document;
		fta:hasName "DA42-POH-39".
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-40> a fta:Document;
		fta:hasName "DA42-POH-40".
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-41> a fta:Document;
		fta:hasName "DA42-POH-41".
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-42> a fta:Document;
		fta:hasName "DA42-POH-42".
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-43> a fta:Document;
		fta:hasName "DA42-POH-43".
	<http://onto.fel.cvut.cz/ontologies/fmea/19msmt/BlueSky/DA42-POH--has-component/DA42-POH-44> a fta:Document;
		fta:hasName "DA42-POH-44".
}WHERE{}
"""; ];
  sml:replace true ;
.

:import-annotated-document-ontology
  a sml:ImportRDFFromWorkspace ;
  sm:next :construct-fta-model ;
  sml:baseURI [
      rdf:type sp:str ;
      sp:arg1 [
          sp:varName "documentIri" ;
      ] ;
  ] ;
  sml:ignoreImports true ;
.

:list-documents_Return
  a sml:ReturnRDF ;
  sml:serialization sml:Turtle ;
.

:convert-document_Return
  a sml:ReturnRDF ;
  sml:serialization sml:Turtle ;
.

:list-documents
  a sm:Function ;
  sm:returnModule :list-documents_Return ;
  rdfs:subClassOf sm:Functions ;
.

:convert-document
  a sm:Function ;
  sm:returnModule :convert-document_Return ;
  rdfs:subClassOf sm:Functions ;
.

